import json
import math
import heapq as hq  # using heapq in python

# version2:
# input: source and target address
# ouput: a tuple, contains shortest path (reversed address) and distance
def dijkstra(adj, source_addr, target_addr):
    "compute shortest path an distance from source to target"
    with open("node_all.json") as f:
        all_nodes = json.load(f)
    source = get_id_from_addr(all_nodes, source_addr)
    target = get_id_from_addr(all_nodes, target_addr)
    # store the predecessor of all nodes, init with itself
    pred = {x: x for x in adj}
    # store the all min distitance of all nodes, init with infinity
    dist = {x: math.inf for x in adj}
    # initialize
    dist[source] = 0
    heap = []
    hq.heappush(heap, [dist[source], source])
    while heap:
        u = hq.heappop(heap)  # u is a list [u_dist, u_id]
        u_dist = u[0]
        u_id = u[1]
        if u_dist == dist[u_id]:
            for v in adj[u_id]:
                v_id = v[0]
                w_uv = v[1]
                if dist[u_id] + w_uv < dist[v_id]:
                    dist[v_id] = dist[u_id] + w_uv
                    hq.heappush(heap, [dist[v_id], v_id])  # decrease key
                    pred[v_id] = u_id
    if dist[target] == math.inf:
        # cannot find path
        print("There is no path between ", source, "and", target)
    else:
        reversed_path = []
        # find predecessor from target
        node = target
        while True:
            addr = get_addr_from_id_reversed(all_nodes, node)
            reversed_path.append(addr)
            if(node == pred[node]):
                break
            node = pred[node]
        # reverse
        path = reversed_path[::-1]
        '''
        uncomment here to have a view about the output
        '''
        # print(path)
        # print("The shortest path is " + " ".join(path) + "\n")
        # print(
        #     f"The distance from {source} to {target} is {str(dist[target])}\n")
        # print("distance dictionary: " + str(dist) + "\n")
        # print("predecessor dictionary: " + str(pred))
        node_geo = {"type": "FeatureCollection","properties": { "scalerank": 5}, "features": [{ "type": "Feature", "geometry":
                    { "type": "LineString", "coordinates": path}}]}
        with open('dijkstra_geo_out.json', 'w') as fout:
            json.dump(node_geo, fout, indent = 4)
        return node_geo, str(dist[target])

def get_adj_from_all_nodes():
    "get adjcent nodes of all nodes"
    with open("node_all.json") as f:
        all_nodes = json.load(f)
    adj = {}
    for node in all_nodes.keys():
        all_neighbors = all_nodes.get(node).get('neighbours')
        neighbors = []
        for each in all_neighbors:
            neigh = []
            neigh.append(each[0][0])
            neigh.append(each[1])
            neighbors.append(neigh)
        adj[node] = neighbors
    return adj
'''
=======================================================================================================
example output:
{'61321094': [['61321106', 0.04903304678254322], ['61326611', 0.052406387249620566]],
'61321106': [['61321094', 0.04903304678254322]],
'61321110': [['1220427140', 0.058206100712086616],['61321112', 0.13077582925865214]],
'61321112': [['61321110', 0.13077582925865214], ['61326606', 0.13838398793677853]],...
...}
=======================================================================================================
'''

def get_id_from_addr(all_nodes, lati_longi):
    "get the node id given addr"
    for id in all_nodes.keys():
        addr_list = all_nodes.get(id).get('address')
        if addr_list[0] == lati_longi[0] and addr_list[1] == lati_longi[1]:
            return id

def get_addr_from_id_reversed(all_nodes, id):
    "get the addr given node id and reverse the lati and longi"
    addr_list = all_nodes.get(id).get('address')
    # lati and longi get reversed
    new_addr = []
    new_addr.append(addr_list[1])
    new_addr.append(addr_list[0])
    return new_addr

def main():
    adj = get_adj_from_all_nodes()
    path, dist = dijkstra(adj, [42.3657714, -71.0510548], [42.3586117, -71.0503471])
    # print(path)
    path, dist = dijkstra(adj, [42.3688772, -71.0797119], [42.355994, -71.0659108])
    path, dist = dijkstra(adj, [42.3573772, -71.070548],[42.3569737, -71.0677675])
    '''
=======================================================================================================
[[-71.0797119, 42.3688772], [-71.0790855, 42.3687946], [-71.0782397, 42.3686831], [-71.0774066, 42.3685733], [-71.0772589, 42.3692039], [-71.0772448, 42.3692641], [-71.0772299, 42.3693277], [-71.0771039, 42.3698659], [-71.0770859, 42.3699425], [-71.0770661, 42.3700271], [-71.0769234, 42.3706364], [-71.076743, 42.3706061], [-71.0765889, 42.3705824], [-71.0764682, 42.3705675], [-71.0764067, 42.3705652], [-71.0762059, 42.3704886], [-71.0760877, 42.3704672], [-71.0759521, 42.370448], [-71.0758105, 42.370424], [-71.0757164, 42.3704005], [-71.0756379, 42.370372], [-71.0755325, 42.3703221], [-71.0752465, 42.3701744], [-71.0748297, 42.3699625], [-71.0747008, 42.3698992], [-71.073898, 42.3695112], [-71.0733734, 42.3692546], [-71.073312, 42.3692277], [-71.0732475, 42.3692015], [-71.073209, 42.369191], [-71.0731699, 42.3691868], [-71.073132, 42.3691873], [-71.0730914, 42.369192], [-71.0726919, 42.3689893], [-71.0723283, 42.3688048], [-71.0716085, 42.3684394], [-71.0707821, 42.368021], [-71.0702245, 42.3677369], [-71.0700563, 42.367621], [-71.0699731, 42.3675684], [-71.0698915, 42.3675199], [-71.0698134, 42.367476], [-71.069732, 42.3674321], [-71.0695991, 42.3673646], [-71.0693048, 42.3672149], [-71.0689433, 42.3670322], [-71.0685203, 42.3668202], [-71.0684315, 42.3667727], [-71.0683587, 42.3667257], [-71.0682869, 42.3666652], [-71.068148, 42.3665735], [-71.0680663, 42.366522], [-71.0679889, 42.3664855], [-71.0678964, 42.3664545], [-71.0677837, 42.3664257], [-71.0675775, 42.3663831], [-71.0675501, 42.3663425], [-71.0675131, 42.3663068], [-71.0674646, 42.3662801], [-71.0674101, 42.3662621], [-71.0673821, 42.3662135], [-71.0673667, 42.3661678], [-71.0673614, 42.3661258], [-71.0673679, 42.366093], [-71.0673914, 42.3660286], [-71.0674601, 42.3658403], [-71.0675083, 42.3657084], [-71.0670765, 42.3656127], [-71.0670361, 42.3656197], [-71.0672256, 42.3650724], [-71.0671963, 42.3648763], [-71.0672134, 42.3646956], [-71.0672209, 42.3645599], [-71.0672539, 42.3645009], [-71.0674428, 42.3640841], [-71.0674802, 42.3640015], [-71.0675139, 42.363915], [-71.0673854, 42.3639072], [-71.0673044, 42.3638969], [-71.0672244, 42.3638676], [-71.0671655, 42.363832], [-71.0671057, 42.3637758], [-71.0670693, 42.3637234], [-71.0670508, 42.3636627], [-71.0670386, 42.3635936], [-71.0670306, 42.3634214], [-71.0669926, 42.3621936], [-71.066972, 42.3612322], [-71.0669586, 42.361118], [-71.0665241, 42.361126], [-71.0663833, 42.3611286], [-71.0660027, 42.3611294], [-71.065515, 42.3611345], [-71.0651563, 42.3611368], [-71.0645576, 42.3611478], [-71.064433, 42.359741], [-71.0643854, 42.3593521], [-71.0643828, 42.3585128], [-71.0643837, 42.3584677], [-71.0644004, 42.3584378], [-71.0644371, 42.3584152], [-71.0645102, 42.3584047], [-71.0650799, 42.3583401], [-71.065095, 42.358041], [-71.0650927, 
42.3576703], [-71.0650869, 42.3572292], [-71.065086, 42.3571645], [-71.0651213, 42.3571572], [-71.0650635, 42.3570852], [-71.0649675, 42.3569654], [-71.0649746, 42.3567824], [-71.0649422, 42.3564253], [-71.0649073, 42.3560798], [-71.0650189, 42.3560544], [-71.0650268, 42.3560195], [-71.0650464, 42.3559812], [-71.0650949, 42.3559385], [-71.0651549, 42.3559087], [-71.0652421, 42.3558895], [-71.0653529, 42.3558925], [-71.0659108, 42.355994]]

[[-71.070548, 42.3573772], [-71.0718491, 42.3570688], [-71.0716691, 42.356624], [-71.072934, 42.3563574], [-71.0729125, 42.3564527], [-71.0728935, 42.3565277], [-71.0727205, 42.3571215], [-71.072697, 42.3571884], [-71.072654, 42.357292], [-71.0723347, 42.3573536], [-71.0719941, 42.3574273], [-71.071368, 42.357565], [-71.0708008, 42.3576902], [-71.0707534, 42.3576965], [-71.0707068, 42.3576957], [-71.0706568, 42.3576915], [-71.0706028, 42.3576959], [-71.0702841, 
42.3577809], [-71.070279, 42.357773], [-71.0698747, 42.3570179], [-71.0697026, 42.3566983], [-71.0678189, 42.3571073], [-71.0677675, 42.3569737]]
=======================================================================================================
    '''

if __name__ == "__main__":
    main()
